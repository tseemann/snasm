#!/usr/bin/env perl
use strict;
use warnings;
use Getopt::Std;
use File::Basename;
use File::Slurp;
#use File::Path qw'make_path remove_tree';
use File::Which;
use Cwd qw'abs_path getcwd';
use Data::Dumper;
use FindBin;
#use lib "$FindBin::RealBin/../perl5";
#use Snasm;

#......................................................................................

my $VERSION = "0.2.0";
my $EXE = basename($0);
my $URL = 'https://github.com/tseemann/$EXE';

my $MAKEFILE = abs_path("$FindBin::RealBin/../etc/$EXE.Makefile");
my $WITFILE = abs_path("$FindBin::RealBin/../etc/$EXE.witticisms");

# add bundles tools to PATH
#$ENV{'PATH'} .= ":$FindBin::RealBin";

#......................................................................................

my %opt = (
  'c' => '0.95',
  'j' => cpus(),
  'L' => 50,
  'p' => $EXE,
);

sub usage {
  my($errcode) = @_;
  $errcode ||= 0;
  my $ofh = $errcode ? \*STDERR : \*STDOUT;
  print $ofh 
    "NAME\n  $EXE $VERSION\n",
    "SYNOPSIS\n  Core genome alignments from assemblues\n",
    "USAGE\n  $EXE [opts] -d OUTDIR [-r SEQ] <SEQ SEQ ...>",
    "BASIC\n",
    "  -h       Show this help\n",
    "  -V       Print version and exit\n",
    "  -C       Check dependencies and exit\n",
    "  -j INT   Threads to use [$opt{j}]\n",
    "  -y       Dry run, just set up folders\n",
    "INPUT//OUTPUT\n",
    "  -i FOFN  File of input filenames\n",
    "  -d DIR   Output folder\n",
    "  -f       Force folder overwrite\n",
    "  -r FILE  Reference genome [use first genome]\n",
    "  -p NAME  Result file prefix [$opt{p}]\n",
    "PARAMETERS\n",
    "  -L INT   Minimum alignment block [$opt{L}]\n",
    "  -c FLOAT Fuzzy core percent [$opt{c}]\n",
    "  -t       Also make a tree [FIXME]\n",
    "HOMEPAGE\n  $URL\n",
    "END\n";
  exit($errcode);
}

sub version {
  print "$EXE $VERSION\n";
  exit(0);
}

sub checkdeps {
  my($exit) = @_;
  msg("Checking $EXE dependencies...");
  my @DEP = qw(
    sort tee make parallel nproc
    minimap2 any2fasta paftools.js 
    bcftools samtools bedtools
    goalign seqkit csvtk gotree iqtree
  );
  exe($_) for @DEP;;
 
  msg("Installation looks good!"); 
  exit(0) if $exit;
}

#......................................................................................


getopts('VChftyr:c:d:L:j:p:i:', \%opt) or exit(-1);

$opt{'V'} and version();
$opt{'C'} and checkdeps(1);
$opt{'h'} and usage(0);
msg("This is $EXE $VERSION");
#$opt{'r'} or err("Need -r reference genome");
$opt{'d'} or err("Need -d output folder");
my $cpus = $opt{j} || 1;
my $prefix = $opt{p} || $EXE;
$prefix =~ m/\s/ and err("No whitespace allowed in -p '$prefix'");

@ARGV || $opt{i} or err("Need some sequence files");

checkdeps(0);

my($dir,$force) = @opt{'d', 'f'};
#msg("dir=$dir force=$force");
-d $dir ? $force ? wrn("Re-using folder '$dir'")
                 : err("Folder '$dir' exists. Use -f to force overwrite.")
        : run("mkdir -p '$dir'");

#wrn("debug exit"); exit;
#......................................................................................

# array of all files to process
my @file;

my $fofn = $opt{'i'};
if ($fofn and -r $fofn) {
  @file = read_file($fofn);
  chomp @file;
  msg("Added", 0+@file, "files from -i $fofn");
}

push @file, @ARGV;
msg("Added", 0+@ARGV, "files from cmdline");

# add ref to start of genomes if provides
if ($opt{'r'}) {
  unshift(@file, $opt{r});
  msg("Added 1 reference file");
}

my $cwd = getcwd();
@file = map { m,^/, ? $_ : "$cwd/$_" } @file;
#@ARGV = map { abs_path($_) } @ARGV;
#msg(Dumper(\@ARGV));

my %seq;
my $ref_id;
for my $file (@file) {
  my $id = filename_to_id($file);
  $ref_id //= $id; # choose first genome
  msg("Checking $id =>$file");
  exists $seq{$id} and err("ID '$id' already used");
  -f $file && -r _ && -s _ or err("Problem with file '$file'");
  $seq{$id} = $file;
}

my @id = sort keys %seq;
msg("Reference: $ref_id");
msg("Sequences:", scalar(@id));

chdir($dir);

msg("Preparing the run folders...");
if (1) {
my $input_fn = "$prefix.inputs";
write_file($input_fn,
  map { "$_\t$seq{$_}\n" } @id
);  
run(qq~parallel -k -v -j $cpus -a $input_fn --col-sep \$'\\t' "mkdir -p '{1}' && ln -f -s '{2}' '{1}/input'"~);
}
else {
for my $id (@id) {
  run("mkdir -p $id");
  run("ln -f -s '$seq{$id}' '$id/input'");
}
}
#msg("Just timing the symlinking"); exit;

my $idfile = "$prefix.ids";
write_file($idfile, map { "$_\n" } @id);

my $make = "# $EXE $VERSION\n\n";
$make .= "CPUS := $cpus\n";
$make .= "REF := $ref_id/fna\n";
$make .= "ALEN := $opt{L}\n";
$make .= "OUT := $prefix\n";
#$make .= "VCFADD := $FindBin::RealBin/vcf-add_missing\n";
$make .= "IDFILE := $idfile\n";
$make .= read_file($MAKEFILE);

write_file('Makefile', $make);

$opt{'y'} 
? msg("Run pipeline:\nmake -j $cpus -C",abs_path('.'))
: run("make -j $cpus |& tee $EXE.log");  

msg( "*Did you know?\n", random_line($WITFILE) );
msg("Done.");

#......................................................................................

sub filename_to_id {
  my($s) = @_;
  $s = basename($s);
  #$s =~ s/\..*$//;
  $s =~ s/\.(gbk|gb|gbff|fa|fna|fasta|ffn|gfa|gff)(\.(gz|xz|zstd|bz2|Z))?$//;
  # change / and spaces to _
  $s =~ s,[\s/],_,g;
  return $s;
}

#......................................................................................

sub msg { print STDERR "@_\n"; }
sub wrn { msg("WARNING:", @_); }
sub err { msg("ERROR:", @_); exit(1); }

#......................................................................................

sub cpus {
  my($c) = qx'nproc --all';
  chomp $c;
  return $c || 1;
}

#......................................................................................

sub exe {
  my($tool) = @_;
  my $path = which($tool);
  $path ? msg("Found '$tool' - $path")
        : err("Can't find '$tool' - please install it");
  return $path;
}

#......................................................................................

sub run {
  msg("Running:", @_);
  system(@_)==0 or err("Could not run: @_");
}
#......................................................................................

sub random_line {
  my($fname) = @_;
  -r $fname or err("Can't read file '$fname'");
  my @line = read_file($fname);
  my $L = $line[ rand(@line) ];
  chomp $L;
  return $L;
}


#......................................................................................



#......................................................................................
