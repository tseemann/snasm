#!/usr/bin/env perl
use strict;
use warnings;
use Getopt::Std;
use File::Basename;
use Data::Dumper;
use Cwd 'abs_path';
use File::Slurp;
use File::Path qw(make_path remove_tree);

use FindBin;
use lib "$FindBin::RealBin/../perl5";
use Snasm;

#......................................................................................

my $VERSION = "0.0.2";
my $EXE = basename($0);
my $URL = 'https://github.com/tseemann/$EXE';
my $MAKEFILE = abs_path("$FindBin::RealBin/../etc/Makefile.$EXE"),

# add bundles tools to PATH
$ENV{'PATH'} .= ":$FindBin::RealBin";

#......................................................................................

my %opt = (
  'c' => '0.95',
  'j' => cpus(),
  'L' => 50,
);

sub usage {
  my($errcode) = @_;
  $errcode ||= 0;
  my $ofh = $errcode ? \*STDERR : \*STDOUT;
  print $ofh 
    "NAME\n  $EXE $VERSION\n",
    "SYNOPSIS\n  Core genome alignments from assemblues\n",
    "USAGE\n  $EXE [opts] -d OUTDIR [-r SEQ] <SEQ SEQ ...>",
    "OPTIONS\n",
    "  -h       Show this help\n",
    "  -v       Print version and exit\n",
    "  -j INT   Threads to use [$opt{j}]\n",
    "  -r FILE  Reference genome [use first genome]\n",
    "  -d DIR   Output folder\n",
    "  -f       Force folder overwrite\n",
    "  -L INT   Minimum alignment block [$opt{L}]\n",
    "  -t       Also make a tree\n",
    "  -c FLOAT Fuzzy core percent [$opt{c}]\n",
    "HOMEPAGE\n  $URL\n",
    "END\n";
  exit($errcode);
}

sub version {
  print "$EXE $VERSION\n";
  exit(0);
}

#......................................................................................


getopts('vhftr:c:d:L:', \%opt) or exit(-1);

$opt{'v'} and version();
$opt{'h'} and usage(0);
msg("This is $EXE $VERSION");
#$opt{'r'} or err("Need -r reference genome");
$opt{'d'} or err("Need -d output folder");
my $cpus = $opt{j} // 1;

@ARGV or err("Need some sequence files");

exe($_) for qw'parallel minimap2 any2fasta
 paftools.js bcftools goalign sort seqkit';
exe('vcf-add_missing');

my($dir,$force) = @opt{'d', 'f'};
#msg("dir=$dir force=$force");
-d $dir ? $force ? wrn("Re-using folder '$dir'")
                 : err("Folder '$dir' exists. Use -f to force overwrite.")
        : run("mkdir -p '$dir'");

#wrn("debug exit"); exit;
#......................................................................................

# add ref to start of genomes if provides
unshift(@ARGV, $opt{r}) if $opt{r};
@ARGV = map { abs_path($_) } @ARGV;
#msg(Dumper(\@ARGV));

my %seq;
my $ref_id;
for my $file (@ARGV) {
  my $id = filename_to_id($file);
  $ref_id //= $id; # choose first genome
  msg("[$id] checking '$file'");
  exists $seq{$id} and err("ID '$id' already used");
  -f $file && -r _ or err("Problem with file '$file'");
  $seq{$id} = $file;
}

my @id = sort keys %seq;
msg("Reference: $ref_id");
msg("Sequences:", scalar(@id));

chdir($dir);
for my $id (@id) {
  run("mkdir -p $id");
  run("ln -f -s '$seq{$id}' '$id/input'");
}

my $idfile = "$EXE.ids";
my $make = "# $EXE $VERSION\n\n";
$make .= "CPUS := $cpus\n";
$make .= "REF := $id[0]/fna\n";
$make .= "VCFADD := $FindBin::RealBin/vcf-add_missing\n";
$make .= "IDFILE := $idfile\n";
$make .= read_file($MAKEFILE);

write_file('Makefile', $make);
write_file($idfile, map { "$_\n" } @id);

run("make -j $cpus |& tee $EXE.log");  

msg("Done.");

#......................................................................................

sub filename_to_id {
  my($s) = @_;
  $s = basename($s);
  $s =~ s/\..*$//;
  # change / and spaces to _
  $s =~ s,[\s/],_,g;
  return $s;
}

#......................................................................................
